labs = {}

local labZone_GUIDs = {
  Red = '6d4e6f',
  White = 'b1c7d7',
  Blue = '593d4b',
  Yellow = '786fca'
}

function labs.getRemainingLabsLetters()
  local letters = {}
  local baseLabs = supply.getContent('baseLab')
  for _, baseLab in ipairs(baseLabs) do
    local letter = gmtools.parseGmNotes(baseLab.gm_notes).letter
    table.insert(letters, 1, letter)
  end
  return letters
end

function labs.placeBaseLab(color)
  local labZone = getObjectFromGUID(labZone_GUIDs[color])
  local labPos = labZone.getPosition()
  local labRot = labZone.getRotation()
  labPos.y = 1.06
  local baseLab = supply.take('baseLab', labPos, labRot)
  baseLab.setLock(true)
  return baseLab
end

function labs.getCapacities(color)
  local baseLabs = getObjectsByType(labZone_GUIDs[color], 'baseLab')
  local capacities = {
    time = 0,
    crystal = 0,
    research = 0,
    octopod = 0,
    A = 0,
    B = 0,
    C = 0,
    D = 0,
    E = 0,
    F = 0
  }
  if #baseLabs > 0 then
    capacities.time = 2
    capacities.crystal = 2
    capacities.research = 2
    capacities.octopod = 2
    capacities[gmtools.parse(baseLabs[1]).letter] = 1
    local labExps = getObjectsByType(labZone_GUIDs[color], 'labExp')
    for _, labExp in ipairs(labExps) do
      local value = gmtools.parse(labExp)
      capacities[value.l] = capacities[value.l] + 1
      capacities[value.r] = capacities[value.r] + 1
    end
  end
  capacities.time = capacities.time * 2
  return capacities
end

function labs.countExpansions(color)
  return #getObjectsByType(labZone_GUIDs[color], 'labExp')
end
