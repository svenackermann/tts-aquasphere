board = {}

local sectors = {
  A = 'ba4a26',
  B = '88ac24',
  C = '5f06a8',
  D = '8d3c6b',
  E = 'f0daa3',
  F = '56bf39'
}

local sectorPositions = {
  {0.04, 1.06, 9.74},
  {8.60, 1.06, 4.74},
  {8.60, 1.06, -5.14},
  {-0.03, 1.06, -10.08},
  {-8.57, 1.06, -5.15},
  {-8.51, 1.06, 4.74}
}

local labExpansionsBag_GUID = '38554f'
local researchCardsStack_GUID = 'b9d782'
local octopodsBag_GUID = '612de1'
local crystalsBag_GUID = 'e3cb69'

local researchCardPositions = {
  {3.40, 2, 17.62},
  {17.11, 2, 5.76},
  {13.74, 2, -11.95},
  {-3.48, 2, -17.93},
  {-17.15, 2, -6.24},
  {-13.69, 2, 11.54}
}

local labExpansionsPositions = {
  {-3.10, 2, 17.41},
  {13.60, 2, 11.28},
  {16.77, 2, -6.20},
  {3.10, 2, -17.63},
  {-13.55, 2, -11.65},
  {-16.67, 2, 5.81}
}

local sectorZones = {
  {
    submarines = {'7f4251', 'ed1ab3', '3f674c', '3f85bb'},
    time = 'd86a80',
    octopod = 'd633eb',
    crystal = '7afdf8',
    loadingStations = {'5ff1d9'}
  },
  {
    submarines = {'58ccec', 'e898aa', 'eba5d1', 'a37acd'},
    time = '8ed132',
    octopod = '0889ed',
    crystal = 'c9acd1',
    loadingStations = {'a98469'}
  },
  {
    submarines = {'f74218', '5d74f7', '67ab90', '4c9bce'},
    time = '834906',
    octopod = 'e67669',
    crystal = '5f836a',
    loadingStations = {'5b78be'}
  },
  {
    submarines = {'4c6dce', '0cacd2', '414109', '602f03'},
    time = 'a4eff6',
    octopod = '73f7d9',
    crystal = '7db834',
    loadingStations = {'7f898b'}
  },
  {
    submarines = {'eb704f', '3d533b', '6a723f', '620aec'},
    time = '975fae',
    octopod = 'a2141a',
    crystal = '8d4a78',
    loadingStations = {'881c87'}
  },
  {
    submarines = {'90bbc8', 'bcbeb5', 'aa3206', '71dafb'},
    time = '539938',
    octopod = '856985',
    crystal = '29812b',
    loadingStations = {'741281'}
  }
}

local function shuffleSectors()
  local guids = {}
  local sectorKeys = {}
  for k, v in pairs(sectors) do
  	local pos = math.random(1, #guids + 1)
  	table.insert(guids, pos, v)
    table.insert(sectorKeys, pos, k)
  end
  return guids, sectorKeys
end

local function dealResearchCards()
  local researchCardsStack = getObjectFromGUID(researchCardsStack_GUID)
  for i, researchCardPosition in ipairs(researchCardPositions) do
    researchCardsStack.takeObject({
      position = researchCardPosition,
      rotation = {0, i * 60 + 233, 0}
    })
  end
end

local function dealLabExpansions()
  local labExpansionsBag = getObjectFromGUID(labExpansionsBag_GUID)
  for i, labExpansionsPosition in ipairs(labExpansionsPositions) do
    labExpansionsBag.takeObject({
      position = labExpansionsPosition,
      rotation = {0, i * 60 + 4, 0}
    })
  end
end

local function placeTokensInZone(sectorIndex, count, bag_GUID, zoneId)
  local bag = getObjectFromGUID(bag_GUID)
  local zone = getObjectFromGUID(sectorZones[sectorIndex][zoneId])
  local pos = zone.getPosition()
  pos.y = 3
  for i = 1, count do
    bag.takeObject({
      position = pos,
      rotation = zone.getRotation()
    })
    pos.y = pos.y + 0.5
  end
end

function board.placeOctopods(sectorIndex, count)
  placeTokensInZone(sectorIndex, count, octopodsBag_GUID, 'octopod')
end

function board.placeCrystals(sectorIndex, count)
  placeTokensInZone(sectorIndex, count, crystalsBag_GUID, 'crystal')
end

function board.placeTime(sectorIndex, count)
  placeTokensInZone(sectorIndex, count, timeBag_GUID, 'time')
end

function board.removeTime(sectorIndex)
  local times = gmtools.getObjectsFromZone(sectorZones[sectorIndex].time, {type = 'time'})
  for _, time in ipairs(times) do
    time.destruct()
  end
end

local function findZoneForSubmarine(sectorIndex, submarine, zoneSubs)
  local zones = sectorZones[sectorIndex].submarines
  local color = gmtools.parse(submarine).color
  -- in 2 player mode we have 2 neutral colors, but here both are Grey
  local anotherAllowed = color == 'Grey' and playerCount == 2
  for i, zone_GUID in ipairs(zones) do
    local subsInZone = gmtools.getObjectsFromZone(zone_GUID, {type = 'submarine'})
    if #subsInZone == 0 then
      zoneSubs[zone_GUID] = submarine
      return true
    else
      local inZoneColor = gmtools.parse(subsInZone[1]).color
      if inZoneColor == color then
        if anotherAllowed then
          anotherAllowed = false
        else
          return false
        end
      end
    end
  end
  return false
end

function board.placeSubmarines(sectorIndices, submarines)
  local zoneSubs = {}
  for i, sectorIndex in ipairs(sectorIndices) do
    local found = false
    local nextIndex = sectorIndex
    local submarine = submarines[i]
    repeat
      found = findZoneForSubmarine(nextIndex, submarine, zoneSubs)
      nextIndex = (nextIndex % 6) + 1
    until found or nextIndex == sectorIndex
  end
  for zone_GUID, submarine in pairs(zoneSubs) do
    local zone = getObjectFromGUID(zone_GUID)
    local pos = zone.getPosition()
    pos.y = 1.14
    submarine.setPositionSmooth(pos, false)
    submarine.setRotationSmooth(zone.getRotation(), false)
    submarine.setLock(true)
  end
end

function board.placeBotToLoad(sectorIndex, bot)
  -- TODO works only for first bot currently
  local zone_GUID = sectorZones[sectorIndex].loadingStations[1]
  local zone = getObjectFromGUID(zone_GUID)
  local pos = zone.getPosition()
  pos.y = 1.59
  bot.setPositionSmooth(pos, false)
  bot.setRotationSmooth(zone.getRotation(), false)
end

function board.setup()
  local sectors_GUIDs, sectorKeys = shuffleSectors()
  for i, sector_GUID in ipairs(sectors_GUIDs) do
    local sector = getObjectFromGUID(sector_GUID)
    sector.setPositionSmooth(sectorPositions[i], false)
    sector.setRotation({0.00, 60 * (i - 1), 0.00})
  end

  getObjectFromGUID(labExpansionsBag_GUID).shuffle()
  getObjectFromGUID(researchCardsStack_GUID).shuffle()
  dealResearchCards()
  dealLabExpansions()

  return sectorKeys
end

function board.nextRound()
  dealResearchCards()
  dealLabExpansions()
end
