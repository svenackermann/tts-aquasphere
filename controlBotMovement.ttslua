local controlZones = {}
local controlBotEvents = {}

local function checkBotEvents()
  for zone_GUID, event in pairs(controlBotEvents) do
    event.timer = nil
    local newBot = event.enter_object
    local bots = getObjectsByType(zone_GUID, 'bot')
    local oldBot = bots[1]
    if oldBot == newBot then
      oldBot = bots[2]
    end
    if oldBot then
      event.oldBot = oldBot
      event.newBot = newBot
      local zone = getObjectFromGUID(zone_GUID)
      local tempPos = zone.positionToWorld({0, 0, -1})
      tempPos.y = 1.6
      oldBot.setPositionSmooth(tempPos, false)
      oldBot.setRotation(zone.getRotation())
      if event.dropped then
        -- the less likely case that the new bot is already dropped
        controlBotEvents[zone_GUID] = nil
        station.placeBotToLoad(controlZones[zone_GUID], oldBot)
      end
    else
      -- first bot entered
      controlBotEvents[zone_GUID] = nil
    end
  end
end

local function onObjectEnterControlZone(enter_object, zone)
  local objConfig = gmtools.parse(enter_object)
  if objConfig and objConfig.type == 'bot' then
    local zone_GUID = zone.getGUID()
    controlBotEvents[zone_GUID] = {
      enter_object = enter_object,
      timer = Wait.time(checkBotEvents, 0.2)
    }
  end
end

local function onObjectLeaveControlZone(leave_object, zone)
  local zone_GUID = zone.getGUID()
  local event = controlBotEvents[zone_GUID]
  if event and event.enter_object == leave_object then
    if event.timer then
      -- timer still waiting, so cancel now
      Wait.stop(event.timer)
    end
    controlBotEvents[zone_GUID] = nil
    if event.oldBot then
      -- rollback old bot
      local pos = zone.getPosition()
      pos.y = 1.6
      event.oldBot.setPositionSmooth(pos, false)
      event.oldBot.setRotation(zone.getRotation())
    end
  end
end

--global event
function onObjectDrop(player_color, dropped_object)
  for zone_GUID, event in pairs(controlBotEvents) do
    if event.enter_object == dropped_object then
      if event.timer then
        -- timer not run yet, will be handled in fn checkBotEvents
        event.dropped = true
      else
        controlBotEvents[zone_GUID] = nil
        station.placeBotToLoad(controlZones[zone_GUID], event.oldBot)
      end
    end
  end
end

function enableControlBotMovement(sectorZones)
  for i, sector in ipairs(sectorZones) do
    controlZones[sector.control] = i
    sZones.registerZoneEvents(sector.control, onObjectEnterControlZone, onObjectLeaveControlZone)
  end
end
