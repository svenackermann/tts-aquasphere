players = {}

local playerConfigs = {
  Red = {
    board_GUID = '3b7c6e',
    scientist_GUID = 'c3f106',
    initBot_GUID = '7093d9',
    initSubmarine_GUID = 'f322bd',
    timeZone_GUID = 'b49c0d',
    crystalsZone_GUID = 'd0d32b',
    timeProgramZone_GUID = 'e42f7a',
    botSubsSupplyZone_GUID = '99a9c5'
  },
  White = {
    board_GUID = '07611e',
    scientist_GUID = 'b8c84b',
    initBot_GUID = '5d7798',
    initSubmarine_GUID = 'e9e19f',
    timeZone_GUID = 'a5ad52',
    crystalsZone_GUID = '605631',
    timeProgramZone_GUID = '4ce16d',
    botSubsSupplyZone_GUID = '4d9ab4'
  },
  Blue = {
    board_GUID = '73a8fa',
    scientist_GUID = '1b9eb6',
    initBot_GUID = '0b1fba',
    initSubmarine_GUID = 'ff537d',
    timeZone_GUID = '7997ff',
    crystalsZone_GUID = 'f456ca',
    timeProgramZone_GUID = '1e34c4',
    botSubsSupplyZone_GUID = '67001a'
  },
  Yellow = {
    board_GUID = 'b317d9',
    scientist_GUID = '3f9686',
    initBot_GUID = 'ce340c',
    initSubmarine_GUID = 'bea65d',
    timeZone_GUID = '3daecd',
    crystalsZone_GUID = '2a6c40',
    timeProgramZone_GUID = 'f52aed',
    botSubsSupplyZone_GUID = '6e433d'
  }
}

local botActionOrder = {
  lab = 1,
  time = 2,
  crystal = 3,
  octopod = 4,
  submarine = 5,
  research = 6,
  bot = 7
}

local boardSectorBotActions = {
  A = 'research',
  B = 'lab',
  C = 'time',
  D = 'octopod',
  E = 'submarine',
  F = 'crystal'
}

local stationScientistPos = {
  {0.12, 1.83, 13.59},
  {11.72, 1.83, 6.71},
  {11.79, 1.83, -6.81},
  {-0.08, 1.83, -13.90},
  {-11.63, 1.83, -6.85},
  {-11.59, 1.83, 6.46}
}

local function placeInitBotAndScientist(player, letter, sectorIndex)
  local action = boardSectorBotActions[letter]
  local deltaX = (botActionOrder[action] - 1) * 0.31
  local board = getObjectFromGUID(player.board_GUID)
  local initBotPos = board.positionToWorld({1.38 - deltaX, 0.6, -0.78})
  getObjectFromGUID(player.initBot_GUID).setPositionSmooth(initBotPos, false)

  local scientistPos = stationScientistPos[sectorIndex]
  getObjectFromGUID(player.scientist_GUID).setPositionSmooth(scientistPos, false)
end

local function assignTime(player, amount)
  local timeZone = getObjectFromGUID(player.timeZone_GUID)
  local pos = timeZone.getPosition()
  pos.y = 3
  for i = 1, amount do
    supply.take('time', pos, timeZone.getRotation())
    pos.y = pos.y + 0.5
  end
end

function players.setup(color, sectorIndex, letter, startTime)
  local player = playerConfigs[color]
  placeInitBotAndScientist(player, letter, sectorIndex)
  assignTime(player, startTime)
  return getObjectFromGUID(player.initSubmarine_GUID)
end

local function hideTimeButton(player)
  getObjectFromGUID(player.board_GUID).clearButtons()
end

function players.nextRound()
  for _, player in pairs(playerConfigs) do
    local times = gmtools.getObjectsByType(player.timeProgramZone_GUID, 'time')
    for _, time in ipairs(times) do
      time.destruct()
    end
    hideTimeButton(player)
  end
end

function players.countPlacedSubmarines(color)
  return 6 - #gmtools.getObjectsByType(playerConfigs[color].botSubsSupplyZone_GUID, 'submarine')
end

function players.countPlacedBots(color)
  return 14 - #gmtools.getObjectsByType(playerConfigs[color].botSubsSupplyZone_GUID, 'bot')
end

function players.countCrystals(color)
  return gmtools.countStackableObjectsInZone(playerConfigs[color].crystalsZone_GUID, {type = 'crystal'})
end

function players.countTime(color)
  return gmtools.countStackableObjectsInZone(playerConfigs[color].timeZone_GUID, {type = 'time'})
end

local function assignTimeWithCapacity(color, amount)
  local capacity = labs.getCapacities(color).time
  local existing = gmtools.countStackableObjectsInZone(playerConfigs[color].timeZone_GUID, {type = 'time'})
  local count = math.min(capacity - existing, amount)
  if count > 0 then
    assignTime(playerConfigs[color], count)
  end
end

function takeTimeForSubmarines(obj)
  local color = gmtools.parse(obj).color
  local player = playerConfigs[color]
  hideTimeButton(player)
  local submarines = players.countPlacedSubmarines(color)
  assignTimeWithCapacity(color, submarines)
end

function players.showTimeButtons()
  for _, color in ipairs(headquarters.getActivePlayers()) do
    getObjectFromGUID(playerConfigs[color].board_GUID).createButton({
      click_function = 'takeTimeForSubmarines',
      label          = msg.btn.takeTime,
      position       = {1.1, 0.1, -0.5},
      width          = 500,
      font_size      = 70,
      color          = Color.Black,
      font_color     = Color.Yellow
    })
  end
end

function players.returnBots(color, bots)
  local placedBots = players.countPlacedBots(color)
  local board = getObjectFromGUID(playerConfigs[color].board_GUID)
  for _, bot in ipairs(bots) do
    local xPos = 1.23 - math.floor((placedBots - 1) / 2) * 0.26
    local zPos = 0.31 - (placedBots % 2) * 0.22
    local pos = board.positionToWorld({xPos, 0.6, zPos})
    bot.setPositionSmooth(pos, false)
    bot.setRotationSmooth({0, board.getRotation().y + 90, 0}, false)

    local unlock = function() bot.setLock(false) end
    Wait.condition(unlock, function() return not bot.isSmoothMoving() end, 3, unlock)
    placedBots = placedBots - 1
  end
end

local function languageChanged(lang)
  for _, player in pairs(playerConfigs) do
    getObjectFromGUID(player.scientist_GUID).setName(msg.scientist)
  end
end
i18n.registerForLanguageChange(languageChanged)
