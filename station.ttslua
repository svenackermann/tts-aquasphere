station = {}

local sector_GUIDs = {
  A = 'ba4a26',
  B = '88ac24',
  C = '5f06a8',
  D = '8d3c6b',
  E = 'f0daa3',
  F = '56bf39'
}

local sectorPositions = {
  {0.04, 1.06, 9.74},
  {8.60, 1.06, 4.74},
  {8.60, 1.06, -5.14},
  {-0.03, 1.06, -10.08},
  {-8.57, 1.06, -5.15},
  {-8.51, 1.06, 4.74}
}

local researchCardPositions = {
  {3.40, 2, 17.62},
  {17.11, 2, 5.76},
  {13.74, 2, -11.95},
  {-3.48, 2, -17.93},
  {-17.15, 2, -6.24},
  {-13.69, 2, 11.54}
}

local labExpansionsPositions = {
  {-3.10, 2, 17.41},
  {13.60, 2, 11.28},
  {16.77, 2, -6.20},
  {3.10, 2, -17.63},
  {-13.55, 2, -11.65},
  {-16.67, 2, 5.81}
}

local sectorZones = {
  {
    submarines = {'7f4251', 'ed1ab3', '3f674c', '3f85bb'},
    time = 'd86a80',
    octopod = 'd633eb',
    crystal = '7afdf8',
    control = '702e31',
    loadingStations = {'5ff1d9', '8e2966', '06ea3b', 'b6cc9b', '3bbaf9'}
  },
  {
    submarines = {'58ccec', 'e898aa', 'eba5d1', 'a37acd'},
    time = '8ed132',
    octopod = '0889ed',
    crystal = 'c9acd1',
    control = 'ac69a7',
    loadingStations = {'a98469', '00b4ad', 'ac94d7', 'e28922', 'a92be7'}
  },
  {
    submarines = {'f74218', '5d74f7', '67ab90', '4c9bce'},
    time = '834906',
    octopod = 'e67669',
    crystal = '5f836a',
    control = '57ab7e',
    loadingStations = {'5b78be', '316696', 'f403d1', 'f039db', 'd9e14b'}
  },
  {
    submarines = {'4c6dce', '0cacd2', '414109', '602f03'},
    time = 'a4eff6',
    octopod = '73f7d9',
    crystal = '7db834',
    control = '3b3c6d',
    loadingStations = {'7f898b', '152f89', '60eb42', '16d743', 'd7460f'}
  },
  {
    submarines = {'eb704f', '3d533b', '6a723f', '620aec'},
    time = '975fae',
    octopod = 'a2141a',
    crystal = '8d4a78',
    control = '5d10d4',
    loadingStations = {'881c87', 'de160a', '07e1f2', 'bcab8a', 'eaa429'}
  },
  {
    submarines = {'90bbc8', 'bcbeb5', 'aa3206', '71dafb'},
    time = '539938',
    octopod = '856985',
    crystal = '29812b',
    control = '671044',
    loadingStations = {'741281', '9d438f', '9c0549', 'b0f2b8', '6a0d62'}
  }
}

local function dealResearchCards()
  for i, researchCardPosition in ipairs(researchCardPositions) do
    supply.take('researchCard', researchCardPosition, {0, i * 60 + 233, 0})
  end
end

local function dealLabExpansions()
  for i, labExpansionsPosition in ipairs(labExpansionsPositions) do
    supply.take('labExpansion', labExpansionsPosition, {0, i * 60 + 4, 0})
  end
end

local function placeTokensInZone(type, sectorIndex, count)
  local zone = getObjectFromGUID(sectorZones[sectorIndex][type])
  local pos = zone.getPosition()
  pos.y = 3
  for i = 1, count do
    supply.take(type, pos, zone.getRotation())
    pos.y = pos.y + 0.5
  end
end

function station.placeOctopods(sectorIndex, count)
  placeTokensInZone('octopod', sectorIndex, count)
end

function station.placeCrystals(sectorIndex, count)
  placeTokensInZone('crystal', sectorIndex, count)
end

function station.placeTime(sectorIndex, count)
  placeTokensInZone('time', sectorIndex, count)
end

function station.removeTime(sectorIndex)
  local times = gmtools.getObjectsByType(sectorZones[sectorIndex].time, 'time')
  for _, time in ipairs(times) do
    time.destruct()
  end
end

local function findZoneForSubmarine(sectorIndex, submarine, zoneSubs)
  local zones = sectorZones[sectorIndex].submarines
  local color = gmtools.parse(submarine).color
  -- in 2 player mode we have 2 neutral colors, but here both are Grey
  local anotherAllowed = color == 'Grey' and playerCount == 2
  for i, zone_GUID in ipairs(zones) do
    local subsInZone = gmtools.getObjectsByType(zone_GUID, 'submarine')
    if #subsInZone == 0 then
      zoneSubs[zone_GUID] = submarine
      return true
    else
      local inZoneColor = gmtools.parse(subsInZone[1]).color
      if inZoneColor == color then
        if anotherAllowed then
          anotherAllowed = false
        else
          return false
        end
      end
    end
  end
  return false
end

function station.placeSubmarines(sectorIndices, submarines)
  local zoneSubs = {}
  for i, sectorIndex in ipairs(sectorIndices) do
    local found = false
    local nextIndex = sectorIndex
    local submarine = submarines[i]
    repeat
      found = findZoneForSubmarine(nextIndex, submarine, zoneSubs)
      nextIndex = (nextIndex % 6) + 1
    until found or nextIndex == sectorIndex
  end
  for zone_GUID, submarine in pairs(zoneSubs) do
    local zone = getObjectFromGUID(zone_GUID)
    local pos = zone.getPosition()
    pos.y = 1.14
    submarine.setPositionSmooth(pos, false)
    submarine.setRotationSmooth(zone.getRotation(), false)
    submarine.setLock(true)
  end
end

local function getBotsInLoadingStation(sectorIndex)
  local botsInLoadingStation = {}
  local existingBots = 0
  local firstFreeStation = 0
  for i, loadingStation_GUID in ipairs(sectorZones[sectorIndex].loadingStations) do
    local bots = gmtools.getObjectsByType(loadingStation_GUID, 'bot')
    if #bots > 0 then
      existingBots = existingBots + 1
    elseif firstFreeStation == 0 then
      firstFreeStation = i
    end
    table.insert(botsInLoadingStation, {bot = bots[1], station = i})
  end
  return botsInLoadingStation, existingBots, firstFreeStation
end

local function returnBotsToPlayers(botsWithStation)
  local botsToReturn = {}
  local firstFreeStation = 0
  for _, botWithStation in ipairs(botsWithStation) do
    local bot = botWithStation.bot
    local station = botWithStation.station
    if bot then
      local color = gmtools.parse(bot).color
      if botsToReturn[color] == nil then
        --one bot per color can stay
        botsToReturn[color] = {}
      else
        if firstFreeStation == 0 then
          -- first station becomes free
          firstFreeStation = station
        end
        table.insert(botsToReturn[color], bot)
      end
    elseif firstFreeStation == 0 then
      -- first station is already free
      firstFreeStation = station
    end
  end
  for color, bots in pairs(botsToReturn) do
    if #bots > 0 then
      players.returnBots(color, bots)
    end
  end
  return firstFreeStation
end

function station.placeBotToLoad(sectorIndex, bot)
  bot.setLock(true)
  local botsWithStation, existingBots, firstFreeStation = getBotsInLoadingStation(sectorIndex)
  local maxBots = math.min((playerCount - 1) * 2, 5)
  if existingBots >= maxBots then
    broadcastToAll(msg.loadingStationFull, Color.Green)
    table.insert(botsWithStation, 1, {bot = bot, station = 0})
    firstFreeStation = returnBotsToPlayers(botsWithStation)
    -- the new bot can now be placed
  end

  local zone_GUID = sectorZones[sectorIndex].loadingStations[firstFreeStation]
  local zone = getObjectFromGUID(zone_GUID)
  local pos = zone.getPosition()
  pos.y = 1.59
  bot.setPositionSmooth(pos, false)
  bot.setRotationSmooth(zone.getRotation(), false)
end

function station.getControlBots()
  local controlBots = {}
  for i, sector in ipairs(sectorZones) do
    local bots = gmtools.getObjectsByType(sector.control, 'bot')
    local bot = false
    if #bots > 0 then
      bot = bots[1]
    end
    controlBots[i] = bot
  end
  return controlBots
end

function station.countOctopods(sectorIndex)
  local zone_GUID = sectorZones[sectorIndex].octopod
  return gmtools.countStackableObjectsInZone(zone_GUID, {type = 'octopod'})
end

function station.setup(sectors)
  for i, letter in ipairs(sectors) do
    local sector = getObjectFromGUID(sector_GUIDs[letter])
    sector.setPositionSmooth(sectorPositions[i], false)
    sector.setRotation({0.00, 60 * (i - 1), 0.00})
  end

  dealResearchCards()
  dealLabExpansions()
end

function station.nextRound()
  dealResearchCards()
  dealLabExpansions()
end

#include <controlBotMovement>
