scoring = {}

local scoringScheme = {1, 3, 6, 10, 15, 21}
scoringScheme[0] = 0

local scoringCard_GUIDs = {
  Red = 'c4bc0e',
  White = '81fcd3',
  Blue = 'ffda47',
  Yellow = 'b49258'
}

local function scoreControlSpaces(controlSectors)
  local playerList = {}
  for color, sectors in pairs(controlSectors) do
    table.insert(playerList, {color = color, bots = #sectors})
  end
  table.sort(playerList, function(a, b)
    return a.bots > b.bots
  end)

  local points = 6
  local mostBots = playerList[1].bots
  if mostBots == playerList[2].bots then
    points = 3
  end
  local score = {}
  for _, player in ipairs(playerList) do
    if player.bots == mostBots then
      score[player.color] = points
    else
      score[player.color] = 0
    end
  end
  return score
end

local function scoreBots(player)
  local placedSubs = players.countPlacedSubmarines(player)
  if placedSubs == 0 then
    return 0
  end
  local maxScore = placedSubs * 2 + 2
  local placedBots = players.countPlacedBots(player)
  return math.min(maxScore, placedBots)
end

local function getPlayerControlSectors()
  local controlBots = station.getControlBots()
  local controlSectors = {Red = {}, White = {}, Blue = {}, Yellow = {}}
  for sectorIndex, bot in ipairs(controlBots) do
    if bot then
      table.insert(controlSectors[gmtools.parse(bot).color], sectorIndex)
    end
  end
  return controlSectors
end

local function scoreCrystals(player)
  local crystals = players.getCrystals(player)
  crystals = math.min(crystals, #scoringScheme)
  return scoringScheme[crystals]
end

local function scoreOctopods(controlSectors)
  local score = 0
  for sectorIndex in ipairs(controlSectors) do
      local octopods = station.countOctopods(sectorIndex)
      octopods = math.min(octopods, #scoringScheme)
      score = score - scoringScheme[octopods]
  end
  return score
end

local function displayScoring(msgKey, params, color)
  local total = 0
  for _, v in ipairs(params) do
    total = total + v
  end
  table.insert(params, total)
  local scoringCard = getObjectFromGUID(scoringCard_GUIDs[color])
  scoringCard.setName(msg[msgKey .. 'Title']:format(msg.getPlayerName(color)))
  scoringCard.setDescription(string.format(msg[msgKey], table.unpack(params)))
  scoringCard.setInvisibleTo({})
end

function scoring.hide()
  for _, card_GUID in pairs(scoringCard_GUIDs) do
    getObjectFromGUID(card_GUID).setInvisibleTo(Player.getColors())
  end
end

function scoring.intermediate()
  local controlSectors = getPlayerControlSectors()
  local controlScore = scoreControlSpaces(controlSectors)
  for _, color in ipairs(headquarters.getActivePlayers()) do
    local player = players[color]
    local control = controlScore[color]
    local bots = scoreBots(player)
    local crystals = scoreCrystals(player)
    local octopods = scoreOctopods(controlSectors[color])
    displayScoring('scoringIntermediate', {control, bots, crystals, octopods}, color)
  end
end

local function scoreLetters(player)
  local capacities = labs.getCapacities(player)
  local uniqueLetters = 0
  for _, letter in ipairs({'A', 'B', 'C', 'D', 'E', 'F'}) do
    if capacities[letter] > 0 then
      uniqueLetters = uniqueLetters + 1
    end
  end
  return scoringScheme[uniqueLetters]
end

local function scoreSubmarines(player)
  if players.countPlacedSubmarines(player) == 6 then
    return 5
  end
  return 0
end

local function scoreCompletedLab(player)
  if labs.countExpansions(player) == 5 then
    return 5
  end
  return 0
end

function scoring.final()
  for _, color in ipairs(headquarters.getActivePlayers()) do
    local player = players[color]
    local letters = scoreLetters(player)
    local time = players.getTime(player)
    local submarines = scoreSubmarines(player)
    local completedLab = scoreCompletedLab(player)
    displayScoring('scoringFinal', {letters, time, submarines, completedLab}, color)
  end
end
